# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-stretch-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      #- run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      #- run: sudo apt-get install software-properties-common && sudo add-apt-repository -y ppa:ondrej/php && sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev php7.2-bcmath php7.2-intl
      - run: sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev libpng-dev
      - run: sudo docker-php-ext-install -j$(nproc) iconv pdo_mysql pdo_sqlite gd zip bcmath
      #- run: cp .env.example .env

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: npm install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      - run: npm run production
      - run: php artisan clear-compiled
      - run: chmod -R 777 storage
      - run: php artisan storage:link
      - run: touch storage/testing.sqlite
      - run: php artisan passport:keys --force
      - run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      - run: mkdir storage/phpunit
      - run: ./vendor/bin/phpunit --log-junit storage/phpunit/junit.xml --testdox-html storage/phpunit/testdox.html
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run

      - store_artifacts:
          path: ./storage/phpunit
          destination: phpunit

      - store_artifacts:
          path: ./storage/logs
          destination: laravel
